{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e","program":"/home/chenge/.rustup/toolchains/nightly-2020-10-25-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","base64","--edition=2018","/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"consttime\"","--cfg","feature=\"default\"","--cfg","feature=\"mesalock_sgx\"","--cfg","feature=\"sgx_tstd\"","--cfg","feature=\"std\"","-C","metadata=4a4feb7e4a5c1e0b","-C","extra-filename=-4a4feb7e4a5c1e0b","--out-dir","/home/chenge/workplace/rust-sgx-samples/channel_establishment/attestation/target/rls/debug/deps","-L","dependency=/home/chenge/workplace/rust-sgx-samples/channel_establishment/attestation/target/rls/debug/deps","--extern","sgx_tstd=/home/chenge/workplace/rust-sgx-samples/channel_establishment/attestation/target/rls/debug/deps/libsgx_tstd-c28bfefc1912e2c5.rmeta","--cap-lints","allow","-L","native=/home/chenge/workplace/rust-sgx-samples/channel_establishment/attestation/target/rls/debug/build/sgx_backtrace_sys-b1d6dfbd2989c145/out/libbacktrace/","-L","native=/home/chenge/workplace/rust-sgx-samples/channel_establishment/attestation/target/rls/debug/build/sgx_backtrace_sys-b1d6dfbd2989c145/out/libbacktrace","-L","native=/home/chenge/workplace/rust-sgx-samples/channel_establishment/attestation/target/rls/debug/build/sgx_unwind-18c500f13d2b4158/out/libunwind/src/.libs","--error-format=json","--sysroot","/home/chenge/.rustup/toolchains/nightly-2020-10-25-x86_64-unknown-linux-gnu"],"output":"/home/chenge/workplace/rust-sgx-samples/channel_establishment/attestation/target/rls/debug/deps/libbase64-4a4feb7e4a5c1e0b.rmeta"},"prelude":{"crate_id":{"name":"base64","disambiguator":[11449540078341773377,18126288530075639963]},"crate_root":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src","external_crates":[{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6613225743082300914,1742833353142201501]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11975364352078366518,17024437125936897165]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7052056008796586215,10378193753915807487]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7266508812970390764,1104721975748785438]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":5,"id":{"name":"sgx_tstd","disambiguator":[5711454005569031132,16460238909996796011]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":6,"id":{"name":"hashbrown_tstd","disambiguator":[16183371823444078344,9581521231937859750]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":7,"id":{"name":"sgx_unwind","disambiguator":[5102318145313185060,11471209729797343327]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":8,"id":{"name":"sgx_backtrace_sys","disambiguator":[14660314418822277024,729926221133144524]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":9,"id":{"name":"sgx_libc","disambiguator":[9606408002860437706,2854280889918615103]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":10,"id":{"name":"sgx_types","disambiguator":[15093814546649415990,6106876177477605172]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":11,"id":{"name":"sgx_demangle","disambiguator":[5629922212444546827,5063537095693118307]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":12,"id":{"name":"sgx_alloc","disambiguator":[4294983768567477794,6176906306381446119]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":13,"id":{"name":"sgx_trts","disambiguator":[13098705569631004602,1313249152699973655]}},{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","num":14,"id":{"name":"sgx_tprotected_fs","disambiguator":[10042502995804616197,13663583401362379357]}}],"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":0,"byte_end":9154,"line_start":1,"line_end":254,"column_start":1,"column_end":27}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":81},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/mod.rs","byte_start":19328,"byte_end":19341,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"DecoderReader","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":136},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/mod.rs","byte_start":110261,"byte_end":110274,"line_start":4,"line_end":4,"column_start":24,"column_end":37},"alias_span":null,"name":"EncoderWriter","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":176},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/mod.rs","byte_start":110313,"byte_end":110332,"line_start":5,"line_end":5,"column_start":38,"column_end":57},"alias_span":null,"name":"EncoderStringWriter","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":223},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4265,"byte_end":4284,"line_start":97,"line_end":97,"column_start":24,"column_end":43},"alias_span":null,"name":"encode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":217},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4364,"byte_end":4370,"line_start":99,"line_end":99,"column_start":25,"column_end":31},"alias_span":null,"name":"encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":219},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4372,"byte_end":4385,"line_start":99,"line_end":99,"column_start":33,"column_end":46},"alias_span":null,"name":"encode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":221},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4387,"byte_end":4404,"line_start":99,"line_end":99,"column_start":48,"column_end":65},"alias_span":null,"name":"encode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4498,"byte_end":4504,"line_start":103,"line_end":103,"column_start":25,"column_end":31},"alias_span":null,"name":"decode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":264},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4506,"byte_end":4519,"line_start":103,"line_end":103,"column_start":33,"column_end":46},"alias_span":null,"name":"decode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4521,"byte_end":4538,"line_start":103,"line_end":103,"column_start":48,"column_end":65},"alias_span":null,"name":"decode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":270},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4565,"byte_end":4584,"line_start":104,"line_end":104,"column_start":25,"column_end":44},"alias_span":null,"name":"decode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":329},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4586,"byte_end":4597,"line_start":104,"line_end":104,"column_start":46,"column_end":57},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":0,"byte_end":9154,"line_start":1,"line_end":254,"column_start":1,"column_end":27},"name":"","qualname":"::","value":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":38},{"krate":0,"index":67},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":205},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":351},{"krate":0,"index":367},{"krate":0,"index":366},{"krate":0,"index":364},{"krate":0,"index":287},{"krate":0,"index":369},{"krate":0,"index":376},{"krate":0,"index":375},{"krate":0,"index":373},{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304}],"decl_id":null,"docs":" # Configs","sig":null,"attributes":[{"value":"/ # Configs","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":0,"byte_end":13,"line_start":1,"line_end":1,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":14,"byte_end":17,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ There isn't just one type of Base64; that would be too simple. You need to choose a character","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":18,"byte_end":115,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ set (standard, URL-safe, etc) and padding suffix (yes/no).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":116,"byte_end":178,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/ The `Config` struct encapsulates this info. There are some common configs included: `STANDARD`,","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":179,"byte_end":278,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ `URL_SAFE`, etc. You can also make your own `Config` if needed.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":279,"byte_end":346,"line_start":6,"line_end":6,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":347,"byte_end":350,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The functions that don't have `config` in the name (e.g. `encode()` and `decode()`) use the","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":351,"byte_end":446,"line_start":8,"line_end":8,"column_start":1,"column_end":96}},{"value":"/ `STANDARD` config .","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":447,"byte_end":470,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":471,"byte_end":474,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The functions that write to a slice (the ones that end in `_slice`) are generally the fastest","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":475,"byte_end":572,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ because they don't need to resize anything. If it fits in your workflow and you care about","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":573,"byte_end":667,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"/ performance, keep using the same buffer (growing as need be) and use the `_slice` methods for","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":668,"byte_end":765,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ the best performance.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":766,"byte_end":791,"line_start":14,"line_end":14,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":792,"byte_end":795,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Encoding","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":796,"byte_end":810,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":811,"byte_end":814,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Several different encoding functions are available to you depending on your desire for","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":815,"byte_end":905,"line_start":18,"line_end":18,"column_start":1,"column_end":91}},{"value":"/ convenience vs performance.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":906,"byte_end":937,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":938,"byte_end":941,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ | Function                | Output                       | Allocates                      |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":942,"byte_end":1037,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ | ----------------------- | ---------------------------- | ------------------------------ |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1038,"byte_end":1133,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"/ | `encode`                | Returns a new `String`       | Always                         |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1134,"byte_end":1229,"line_start":23,"line_end":23,"column_start":1,"column_end":96}},{"value":"/ | `encode_config`         | Returns a new `String`       | Always                         |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1230,"byte_end":1325,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"/ | `encode_config_buf`     | Appends to provided `String` | Only if `String` needs to grow |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1326,"byte_end":1421,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ | `encode_config_slice`   | Writes to provided `&[u8]`   | Never                          |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1422,"byte_end":1517,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1518,"byte_end":1521,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ All of the encoding functions that take a `Config` will pad as per the config.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1522,"byte_end":1604,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1605,"byte_end":1608,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Decoding","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1609,"byte_end":1623,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1624,"byte_end":1627,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Just as for encoding, there are different decoding functions available.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1628,"byte_end":1703,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1704,"byte_end":1707,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ | Function                | Output                        | Allocates                      |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1708,"byte_end":1804,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"/ | ----------------------- | ----------------------------- | ------------------------------ |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1805,"byte_end":1901,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"/ | `decode`                | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1902,"byte_end":1998,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"/ | `decode_config`         | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":1999,"byte_end":2095,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"/ | `decode_config_buf`     | Appends to provided `Vec<u8>` | Only if `Vec` needs to grow    |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2096,"byte_end":2192,"line_start":38,"line_end":38,"column_start":1,"column_end":97}},{"value":"/ | `decode_config_slice`   | Writes to provided `&[u8]`    | Never                          |","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2193,"byte_end":2289,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2290,"byte_end":2293,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Unlike encoding, where all possible input is valid, decoding can fail (see `DecodeError`).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2294,"byte_end":2388,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2389,"byte_end":2392,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Input can be invalid because it has invalid characters or invalid padding. (No padding at all is","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2393,"byte_end":2493,"line_start":43,"line_end":43,"column_start":1,"column_end":101}},{"value":"/ valid, but excess padding is not.) Whitespace in the input is invalid.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2494,"byte_end":2568,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2569,"byte_end":2572,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # `Read` and `Write`","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2573,"byte_end":2597,"line_start":46,"line_end":46,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2598,"byte_end":2601,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ To map a `Read` of b64 bytes to the decoded bytes, wrap a reader (file, network socket, etc)","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2602,"byte_end":2698,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"/ with `base64::read::DecoderReader`. To write raw bytes and have them b64 encoded on the fly,","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2699,"byte_end":2795,"line_start":49,"line_end":49,"column_start":1,"column_end":97}},{"value":"/ wrap a writer with `base64::write::EncoderWriter`. There is some performance overhead (15% or","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2796,"byte_end":2893,"line_start":50,"line_end":50,"column_start":1,"column_end":98}},{"value":"/ so) because of the necessary buffer shuffling -- still fast enough that almost nobody cares.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2894,"byte_end":2990,"line_start":51,"line_end":51,"column_start":1,"column_end":97}},{"value":"/ Also, these implementations do not heap allocate.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":2991,"byte_end":3044,"line_start":52,"line_end":52,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":3045,"byte_end":3048,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":3049,"byte_end":3061,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":3062,"byte_end":3065,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ If length calculations result in overflowing `usize`, a panic will result.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":3066,"byte_end":3144,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":3145,"byte_end":3148,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The `_slice` flavors of encode or decode will panic if the provided output slice is too small,","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":3149,"byte_end":3247,"line_start":58,"line_end":58,"column_start":1,"column_end":99}},{"value":"deny(missing_docs, trivial_casts, trivial_numeric_casts,\n       unused_extern_crates, unused_import_braces, unused_results,\n       variant_size_differences, warnings)","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":3318,"byte_end":3508,"line_start":61,"line_end":70,"column_start":1,"column_end":3}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":3509,"byte_end":3532,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"no_std","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":3672,"byte_end":3678,"line_start":75,"line_end":75,"column_start":43,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":15},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/chunked_encoder.rs","byte_start":9356,"byte_end":9361,"line_start":10,"line_end":10,"column_start":10,"column_end":15},"name":"Error","qualname":"::chunked_encoder::Sink::Error","value":"type Error;","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":38},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"display","qualname":"::display","value":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":62}],"decl_id":null,"docs":" Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","sig":null,"attributes":[{"value":"/ Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16580,"byte_end":16680,"line_start":1,"line_end":1,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16681,"byte_end":16684,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16685,"byte_end":16692,"line_start":3,"line_end":3,"column_start":1,"column_end":8}},{"value":"/ use base64::display::Base64Display;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16693,"byte_end":16732,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16733,"byte_end":16736,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ let data = vec![0x0, 0x1, 0x2, 0x3];","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16737,"byte_end":16777,"line_start":6,"line_end":6,"column_start":1,"column_end":41}},{"value":"/ let wrapper = Base64Display::with_config(&data, base64::STANDARD);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16778,"byte_end":16848,"line_start":7,"line_end":7,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16849,"byte_end":16852,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16853,"byte_end":16920,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":16921,"byte_end":16928,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":48},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17182,"byte_end":17195,"line_start":19,"line_end":19,"column_start":12,"column_end":25},"name":"Base64Display","qualname":"::display::Base64Display","value":"Base64Display {  }","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"decl_id":null,"docs":" A convenience wrapper for base64'ing bytes into a format string without heap allocation.\n","sig":null,"attributes":[{"value":"/ A convenience wrapper for base64'ing bytes into a format string without heap allocation.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17078,"byte_end":17170,"line_start":18,"line_end":18,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17362,"byte_end":17373,"line_start":26,"line_end":26,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Base64Display>::with_config","value":"pub fn with_config(&[u8], Config) -> Base64Display","parent":null,"children":[],"decl_id":null,"docs":" Create a `Base64Display` with the provided config.\n","sig":null,"attributes":[{"value":"/ Create a `Base64Display` with the provided config.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17296,"byte_end":17350,"line_start":25,"line_end":25,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/mod.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":116}],"decl_id":null,"docs":" Implementations of `io::Read` to transparently decode base64.\n","sig":null,"attributes":[{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4118,"byte_end":4152,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ Implementations of `io::Read` to transparently decode base64.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/mod.rs","byte_start":19226,"byte_end":19291,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":81},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20338,"byte_end":20351,"line_start":32,"line_end":32,"column_start":12,"column_end":25},"name":"DecoderReader","qualname":"::read::decoder::DecoderReader","value":"DecoderReader {  }","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"decl_id":null,"docs":" A `Read` implementation that decodes base64 data read from an underlying reader.","sig":null,"attributes":[{"value":"/ A `Read` implementation that decodes base64 data read from an underlying reader.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19721,"byte_end":19805,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19806,"byte_end":19809,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19810,"byte_end":19824,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19825,"byte_end":19828,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19829,"byte_end":19836,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use std::io::Read;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19837,"byte_end":19859,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19860,"byte_end":19884,"line_start":18,"line_end":18,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19885,"byte_end":19888,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // use a cursor as the simplest possible `Read` -- in real code this is probably a file, etc.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19889,"byte_end":19986,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ let mut wrapped_reader = Cursor::new(b\"YXNkZg==\");","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":19987,"byte_end":20041,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"/ let mut decoder = base64::read::DecoderReader::new(","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20042,"byte_end":20097,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/     &mut wrapped_reader, base64::STANDARD);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20098,"byte_end":20145,"line_start":23,"line_end":23,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20146,"byte_end":20149,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ // handle errors as you normally would","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20150,"byte_end":20192,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/ let mut result = Vec::new();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20193,"byte_end":20225,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ decoder.read_to_end(&mut result).unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20226,"byte_end":20272,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20273,"byte_end":20276,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(b\"asdf\", &result[..]);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20277,"byte_end":20314,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20315,"byte_end":20318,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":20319,"byte_end":20326,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":22065,"byte_end":22068,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<DecoderReader>::new","value":"pub fn new(&'a mut R, Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that will read from the provided reader `r`.\n","sig":null,"attributes":[{"value":"/ Create a new decoder that will read from the provided reader `r`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":21984,"byte_end":22053,"line_start":72,"line_end":72,"column_start":5,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":119},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/mod.rs","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":170},{"krate":0,"index":203},{"krate":0,"index":204}],"decl_id":null,"docs":" Implementations of `io::Write` to transparently handle base64.\n","sig":null,"attributes":[{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4179,"byte_end":4213,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/ Implementations of `io::Write` to transparently handle base64.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/mod.rs","byte_start":110131,"byte_end":110197,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":136},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112422,"byte_end":112435,"line_start":57,"line_end":57,"column_start":12,"column_end":25},"name":"EncoderWriter","qualname":"::write::encoder::EncoderWriter","value":"EncoderWriter {  }","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":146}],"decl_id":null,"docs":" A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","sig":null,"attributes":[{"value":"/ A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":110809,"byte_end":110903,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":110904,"byte_end":110907,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Because base64 has special handling for the end of the input data (padding, etc), there's a","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":110908,"byte_end":111003,"line_start":17,"line_end":17,"column_start":1,"column_end":96}},{"value":"/ `finish()` method on this type that encodes any leftover input bytes and adds padding if","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111004,"byte_end":111096,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"/ appropriate. It's called automatically when deallocated (see the `Drop` implementation), but","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111097,"byte_end":111193,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ any error that occurs when invoking the underlying writer will be suppressed. If you want to","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111194,"byte_end":111290,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ handle such errors, call `finish()` yourself.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111291,"byte_end":111340,"line_start":21,"line_end":21,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111341,"byte_end":111344,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111345,"byte_end":111359,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111360,"byte_end":111363,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111364,"byte_end":111371,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111372,"byte_end":111395,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111396,"byte_end":111399,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111400,"byte_end":111495,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ let mut enc = base64::write::EncoderWriter::new(Vec::new(), base64::STANDARD);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111496,"byte_end":111578,"line_start":29,"line_end":29,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111579,"byte_end":111582,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ // handle errors as you normally would","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111583,"byte_end":111625,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/ enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111626,"byte_end":111662,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111663,"byte_end":111666,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ // could leave this out to be called by Drop, if you don't care","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111667,"byte_end":111734,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ // about handling errors or getting the delegate writer back","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111735,"byte_end":111799,"line_start":35,"line_end":35,"column_start":1,"column_end":65}},{"value":"/ let delegate = enc.finish().unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111800,"byte_end":111841,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111842,"byte_end":111845,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ // base64 was written to the writer","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111846,"byte_end":111885,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(b\"YXNkZg==\", &delegate[..]);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111886,"byte_end":111929,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111930,"byte_end":111933,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111934,"byte_end":111941,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111942,"byte_end":111945,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111946,"byte_end":111958,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111959,"byte_end":111962,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Calling `write()` (or related methods) or `finish()` after `finish()` has completed without","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":111963,"byte_end":112058,"line_start":45,"line_end":45,"column_start":1,"column_end":96}},{"value":"/ error is invalid and will panic.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112059,"byte_end":112095,"line_start":46,"line_end":46,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112096,"byte_end":112099,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112100,"byte_end":112112,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112113,"byte_end":112116,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Base64 encoding itself does not generate errors, but errors from the wrapped writer will be","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112117,"byte_end":112212,"line_start":50,"line_end":50,"column_start":1,"column_end":96}},{"value":"/ returned as per the contract of `Write`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112213,"byte_end":112257,"line_start":51,"line_end":51,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112258,"byte_end":112261,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112262,"byte_end":112279,"line_start":53,"line_end":53,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112280,"byte_end":112283,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ It has some minor performance loss compared to encoding slices (a couple percent).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112284,"byte_end":112370,"line_start":55,"line_end":55,"column_start":1,"column_end":87}},{"value":"/ It does not do any heap allocation.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":112371,"byte_end":112410,"line_start":56,"line_end":56,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114034,"byte_end":114037,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderWriter<W>>::new","value":"pub fn new(W, Config) -> EncoderWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that will write to the provided delegate writer `w`.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that will write to the provided delegate writer `w`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":113945,"byte_end":114022,"line_start":91,"line_end":91,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":115126,"byte_end":115132,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<EncoderWriter<W>>::finish","value":"pub fn finish(&mut Self) -> Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data and write it, including any trailing incomplete input\n triples and associated padding.","sig":null,"attributes":[{"value":"/ Encode all remaining buffered data and write it, including any trailing incomplete input","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114376,"byte_end":114468,"line_start":104,"line_end":104,"column_start":5,"column_end":97}},{"value":"/ triples and associated padding.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114473,"byte_end":114508,"line_start":105,"line_end":105,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114513,"byte_end":114516,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Once this succeeds, no further writes or calls to this method are allowed.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114521,"byte_end":114599,"line_start":107,"line_end":107,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114604,"byte_end":114607,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ This may write to the delegate writer multiple times if the delegate writer does not accept","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114612,"byte_end":114707,"line_start":109,"line_end":109,"column_start":5,"column_end":100}},{"value":"/ all input provided to its `write` each invocation.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114712,"byte_end":114766,"line_start":110,"line_end":110,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114771,"byte_end":114774,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ If you don't care about error handling, it is not necessary to call this function, as the","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114779,"byte_end":114872,"line_start":112,"line_end":112,"column_start":5,"column_end":98}},{"value":"/ equivalent finalization is done by the Drop impl.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114877,"byte_end":114930,"line_start":113,"line_end":113,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114935,"byte_end":114938,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Returns the writer that this was constructed around.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":114943,"byte_end":114999,"line_start":115,"line_end":115,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":115004,"byte_end":115007,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":115012,"byte_end":115024,"line_start":117,"line_end":117,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":115029,"byte_end":115032,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ The first error that is not of `ErrorKind::Interrupted` will be returned.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":115037,"byte_end":115114,"line_start":119,"line_end":119,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":176},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127606,"byte_end":127625,"line_start":53,"line_end":53,"column_start":12,"column_end":31},"name":"EncoderStringWriter","qualname":"::write::encoder_string_writer::EncoderStringWriter","value":"EncoderStringWriter {  }","parent":null,"children":[{"krate":0,"index":178}],"decl_id":null,"docs":" A `Write` implementation that base64-encodes data using the provided config and accumulates the\n resulting base64 in memory, which is then exposed as a String via `into_inner()`.","sig":null,"attributes":[{"value":"/ A `Write` implementation that base64-encodes data using the provided config and accumulates the","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126371,"byte_end":126470,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ resulting base64 in memory, which is then exposed as a String via `into_inner()`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126471,"byte_end":126556,"line_start":8,"line_end":8,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126557,"byte_end":126560,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126561,"byte_end":126575,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126576,"byte_end":126579,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Buffer base64 in a new String:","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126580,"byte_end":126614,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126615,"byte_end":126618,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126619,"byte_end":126626,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126627,"byte_end":126650,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126651,"byte_end":126654,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ let mut enc = base64::write::EncoderStringWriter::new(base64::STANDARD);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126655,"byte_end":126731,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126732,"byte_end":126735,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126736,"byte_end":126772,"line_start":19,"line_end":19,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126773,"byte_end":126776,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // get the resulting String","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126777,"byte_end":126808,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/ let b64_string = enc.into_inner();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126809,"byte_end":126847,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126848,"byte_end":126851,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"YXNkZg==\", &b64_string);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126852,"byte_end":126892,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126893,"byte_end":126900,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126901,"byte_end":126904,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Or, append to an existing String:","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126905,"byte_end":126942,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126943,"byte_end":126946,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126947,"byte_end":126954,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126955,"byte_end":126978,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126979,"byte_end":126982,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut buf = String::from(\"base64: \");","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":126983,"byte_end":127026,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127027,"byte_end":127030,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut enc = base64::write::EncoderStringWriter::from(&mut buf, base64::STANDARD);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127031,"byte_end":127118,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127119,"byte_end":127122,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127123,"byte_end":127159,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127160,"byte_end":127163,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ // release the &mut reference on buf","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127164,"byte_end":127204,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/ let _ = enc.into_inner();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127205,"byte_end":127234,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127235,"byte_end":127238,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"base64: YXNkZg==\", &buf);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127239,"byte_end":127280,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127281,"byte_end":127288,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127289,"byte_end":127292,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127293,"byte_end":127305,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127306,"byte_end":127309,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Calling `write()` (or related methods) or `finish()` after `finish()` has completed without","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127310,"byte_end":127405,"line_start":46,"line_end":46,"column_start":1,"column_end":96}},{"value":"/ error is invalid and will panic.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127406,"byte_end":127442,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127443,"byte_end":127446,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127447,"byte_end":127464,"line_start":49,"line_end":49,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127465,"byte_end":127468,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Because it has to validate that the base64 is UTF-8, it is about 80% as fast as writing plain","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127469,"byte_end":127566,"line_start":51,"line_end":51,"column_start":1,"column_end":98}},{"value":"/ bytes to a `io::Write`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127567,"byte_end":127594,"line_start":52,"line_end":52,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127846,"byte_end":127850,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"from","qualname":"<EncoderStringWriter<S>>::from","value":"pub fn from(S, Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a EncoderStringWriter that will append to the provided `StrConsumer`.\n","sig":null,"attributes":[{"value":"/ Create a EncoderStringWriter that will append to the provided `StrConsumer`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127754,"byte_end":127834,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128340,"byte_end":128350,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<EncoderStringWriter<S>>::into_inner","value":"pub fn into_inner(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data, including any trailing incomplete input triples and\n associated padding.","sig":null,"attributes":[{"value":"/ Encode all remaining buffered data, including any trailing incomplete input triples and","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128037,"byte_end":128128,"line_start":65,"line_end":65,"column_start":5,"column_end":96}},{"value":"/ associated padding.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128133,"byte_end":128156,"line_start":66,"line_end":66,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128161,"byte_end":128164,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Once this succeeds, no further writes or calls to this method are allowed.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128169,"byte_end":128247,"line_start":68,"line_end":68,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128252,"byte_end":128255,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Returns the base64-encoded form of the accumulated written data.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128260,"byte_end":128328,"line_start":70,"line_end":70,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128652,"byte_end":128655,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderStringWriter<String>>::new","value":"pub fn new(Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a EncoderStringWriter that will encode into a new String with the provided config.\n","sig":null,"attributes":[{"value":"/ Create a EncoderStringWriter that will encode into a new String with the provided config.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128547,"byte_end":128640,"line_start":80,"line_end":80,"column_start":5,"column_end":98}}]},{"kind":"Trait","id":{"krate":0,"index":189},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":129066,"byte_end":129077,"line_start":97,"line_end":97,"column_start":11,"column_end":22},"name":"StrConsumer","qualname":"::write::encoder_string_writer::StrConsumer","value":"StrConsumer","parent":null,"children":[{"krate":0,"index":190}],"decl_id":null,"docs":" An abstraction around consuming `str`s produced by base64 encoding.\n","sig":null,"attributes":[{"value":"/ An abstraction around consuming `str`s produced by base64 encoding.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128984,"byte_end":129055,"line_start":96,"line_end":96,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":129136,"byte_end":129143,"line_start":99,"line_end":99,"column_start":8,"column_end":15},"name":"consume","qualname":"::write::encoder_string_writer::StrConsumer::consume","value":"pub fn consume(&mut Self, &str)","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":" Consume the base64 encoded data in `buf`\n","sig":null,"attributes":[{"value":"/ Consume the base64 encoded data in `buf`","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":129084,"byte_end":129128,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131997,"byte_end":132003,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode::encode","value":"pub fn encode<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.\nConvenience for `encode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131651,"byte_end":131688,"line_start":9,"line_end":9,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131689,"byte_end":131709,"line_start":10,"line_end":10,"column_start":1,"column_end":21}},{"value":"/Convenience for `encode_config(input, base64::STANDARD);`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131710,"byte_end":131771,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131772,"byte_end":131775,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131776,"byte_end":131788,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131789,"byte_end":131792,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131793,"byte_end":131803,"line_start":15,"line_end":15,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131804,"byte_end":131827,"line_start":16,"line_end":16,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131828,"byte_end":131831,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131832,"byte_end":131846,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode(b\"hello world\");","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131847,"byte_end":131895,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131896,"byte_end":131923,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131924,"byte_end":131928,"line_start":21,"line_end":21,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131929,"byte_end":131935,"line_start":22,"line_end":22,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":131936,"byte_end":131989,"line_start":23,"line_end":23,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":219},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132508,"byte_end":132521,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"encode_config","qualname":"::encode::encode_config","value":"pub fn encode_config<T: AsRef<[u8]>>(T, Config) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132080,"byte_end":132117,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132118,"byte_end":132138,"line_start":29,"line_end":29,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132139,"byte_end":132142,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132143,"byte_end":132155,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132156,"byte_end":132159,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132160,"byte_end":132170,"line_start":33,"line_end":33,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132171,"byte_end":132194,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132195,"byte_end":132198,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132199,"byte_end":132213,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode_config(b\"hello world~\", base64::STANDARD);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132214,"byte_end":132288,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132289,"byte_end":132316,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132317,"byte_end":132320,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/    let b64_url = base64::encode_config(b\"hello internet~\", base64::URL_SAFE);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132321,"byte_end":132402,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", b64_url);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132403,"byte_end":132434,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132435,"byte_end":132439,"line_start":42,"line_end":42,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132440,"byte_end":132446,"line_start":43,"line_end":43,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132447,"byte_end":132500,"line_start":44,"line_end":44,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133429,"byte_end":133446,"line_start":75,"line_end":75,"column_start":8,"column_end":25},"name":"encode_config_buf","qualname":"::encode::encode_config_buf","value":"pub fn encode_config_buf<T: AsRef<[u8]>>(T, Config, &mut String)","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nWrites into the supplied output buffer, which will grow the buffer if needed.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132885,"byte_end":132922,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/Writes into the supplied output buffer, which will grow the buffer if needed.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":132923,"byte_end":133003,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133004,"byte_end":133007,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133008,"byte_end":133020,"line_start":59,"line_end":59,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133021,"byte_end":133024,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133025,"byte_end":133035,"line_start":61,"line_end":61,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133036,"byte_end":133059,"line_start":62,"line_end":62,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133060,"byte_end":133063,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133064,"byte_end":133078,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/    let mut buf = String::new();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133079,"byte_end":133114,"line_start":65,"line_end":65,"column_start":1,"column_end":36}},{"value":"/    base64::encode_config_buf(b\"hello world~\", base64::STANDARD, &mut buf);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133115,"byte_end":133193,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133194,"byte_end":133221,"line_start":67,"line_end":67,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133222,"byte_end":133225,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/    buf.clear();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133226,"byte_end":133245,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/    base64::encode_config_buf(b\"hello internet~\", base64::URL_SAFE, &mut buf);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133246,"byte_end":133327,"line_start":70,"line_end":70,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133328,"byte_end":133355,"line_start":71,"line_end":71,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133356,"byte_end":133360,"line_start":72,"line_end":72,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133361,"byte_end":133367,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133368,"byte_end":133421,"line_start":74,"line_end":74,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134722,"byte_end":134741,"line_start":118,"line_end":118,"column_start":8,"column_end":27},"name":"encode_config_slice","qualname":"::encode::encode_config_slice","value":"pub fn encode_config_slice<T: AsRef<[u8]>>(T, Config, &mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64.\n Writes into the supplied output buffer.","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133812,"byte_end":133850,"line_start":88,"line_end":88,"column_start":1,"column_end":39}},{"value":"/ Writes into the supplied output buffer.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133851,"byte_end":133894,"line_start":89,"line_end":89,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133895,"byte_end":133898,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ This is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133899,"byte_end":133995,"line_start":91,"line_end":91,"column_start":1,"column_end":97}},{"value":"/ or statically-allocated buffer).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":133996,"byte_end":134032,"line_start":92,"line_end":92,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134033,"byte_end":134036,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134037,"byte_end":134049,"line_start":94,"line_end":94,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134050,"byte_end":134053,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ If `output` is too small to hold the encoded version of `input`, a panic will result.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134054,"byte_end":134143,"line_start":96,"line_end":96,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134144,"byte_end":134147,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134148,"byte_end":134161,"line_start":98,"line_end":98,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134162,"byte_end":134165,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134166,"byte_end":134177,"line_start":100,"line_end":100,"column_start":1,"column_end":12}},{"value":"/ extern crate base64;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134178,"byte_end":134202,"line_start":101,"line_end":101,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134203,"byte_end":134206,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134207,"byte_end":134222,"line_start":103,"line_end":103,"column_start":1,"column_end":16}},{"value":"/     let s = b\"hello internet!\";","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134223,"byte_end":134258,"line_start":104,"line_end":104,"column_start":1,"column_end":36}},{"value":"/     let mut buf = Vec::new();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134259,"byte_end":134292,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/     // make sure we'll have a slice big enough for base64 + padding","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134293,"byte_end":134364,"line_start":106,"line_end":106,"column_start":1,"column_end":72}},{"value":"/     buf.resize(s.len() * 4 / 3 + 4, 0);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134365,"byte_end":134408,"line_start":107,"line_end":107,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134409,"byte_end":134412,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/     let bytes_written = base64::encode_config_slice(s,","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134413,"byte_end":134471,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/                             base64::STANDARD, &mut buf);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134472,"byte_end":134532,"line_start":110,"line_end":110,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134533,"byte_end":134536,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/     // shorten our vec down to just what was written","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134537,"byte_end":134593,"line_start":112,"line_end":112,"column_start":1,"column_end":57}},{"value":"/     buf.resize(bytes_written, 0);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134594,"byte_end":134631,"line_start":113,"line_end":113,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134632,"byte_end":134635,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(s, base64::decode(&buf).unwrap().as_slice());","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134636,"byte_end":134700,"line_start":115,"line_end":115,"column_start":1,"column_end":65}},{"value":"/ }","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134701,"byte_end":134706,"line_start":116,"line_end":116,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/encode.rs","byte_start":134707,"byte_end":134714,"line_start":117,"line_end":117,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":330},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156115,"byte_end":156126,"line_start":31,"line_end":31,"column_start":5,"column_end":16},"name":"InvalidByte","qualname":"::decode::DecodeError::InvalidByte","value":"DecodeError::InvalidByte(usize, u8)","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" An invalid byte was found in the input. The offset and offending byte are provided.\n","sig":null,"attributes":[{"value":"/ An invalid byte was found in the input. The offset and offending byte are provided.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156023,"byte_end":156110,"line_start":30,"line_end":30,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":334},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156559,"byte_end":156572,"line_start":37,"line_end":37,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::decode::DecodeError::InvalidLength","value":"DecodeError::InvalidLength","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" The length of the input is invalid.\n A typical cause of this is stray trailing whitespace or other separator bytes.\n In the case where excess trailing bytes have produced an invalid length *and* the last byte\n is also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`\n will be emitted instead of `InvalidLength` to make the issue easier to debug.\n","sig":null,"attributes":[{"value":"/ The length of the input is invalid.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156143,"byte_end":156182,"line_start":32,"line_end":32,"column_start":5,"column_end":44}},{"value":"/ A typical cause of this is stray trailing whitespace or other separator bytes.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156187,"byte_end":156269,"line_start":33,"line_end":33,"column_start":5,"column_end":87}},{"value":"/ In the case where excess trailing bytes have produced an invalid length *and* the last byte","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156274,"byte_end":156369,"line_start":34,"line_end":34,"column_start":5,"column_end":100}},{"value":"/ is also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156374,"byte_end":156468,"line_start":35,"line_end":35,"column_start":5,"column_end":99}},{"value":"/ will be emitted instead of `InvalidLength` to make the issue easier to debug.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156473,"byte_end":156554,"line_start":36,"line_end":36,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":336},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156915,"byte_end":156932,"line_start":42,"line_end":42,"column_start":5,"column_end":22},"name":"InvalidLastSymbol","qualname":"::decode::DecodeError::InvalidLastSymbol","value":"DecodeError::InvalidLastSymbol(usize, u8)","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n This is indicative of corrupted or truncated Base64.\n Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for\n symbols that are in the alphabet but represent nonsensical encodings.\n","sig":null,"attributes":[{"value":"/ The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156578,"byte_end":156674,"line_start":38,"line_end":38,"column_start":5,"column_end":101}},{"value":"/ This is indicative of corrupted or truncated Base64.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156679,"byte_end":156735,"line_start":39,"line_end":39,"column_start":5,"column_end":61}},{"value":"/ Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156740,"byte_end":156832,"line_start":40,"line_end":40,"column_start":5,"column_end":97}},{"value":"/ symbols that are in the alphabet but represent nonsensical encodings.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156837,"byte_end":156910,"line_start":41,"line_end":41,"column_start":5,"column_end":78}}]},{"kind":"Enum","id":{"krate":0,"index":329},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156005,"byte_end":156016,"line_start":29,"line_end":29,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::decode::DecodeError","value":"pub enum DecodeError {\n\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    InvalidByte(usize, u8),\n\n    /// The length of the input is invalid.\n    /// A typical cause of this is stray trailing whitespace or other separator bytes.\n    /// In the case where excess trailing bytes have produced an invalid length *and* the last byte\n    /// is also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`\n    /// will be emitted instead of `InvalidLength` to make the issue easier to debug.\n    InvalidLength,\n\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for\n    /// symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n}","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":334},{"krate":0,"index":336}],"decl_id":null,"docs":" Errors that can occur while decoding.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while decoding.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":155915,"byte_end":155956,"line_start":27,"line_end":27,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158278,"byte_end":158284,"line_start":89,"line_end":89,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode::decode","value":"pub fn decode<T: AsRef<[u8]>>(T) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.\nConvenience `decode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":157891,"byte_end":157933,"line_start":74,"line_end":74,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":157934,"byte_end":157975,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/Convenience `decode_config(input, base64::STANDARD);`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":157976,"byte_end":158033,"line_start":76,"line_end":76,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158034,"byte_end":158037,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158038,"byte_end":158050,"line_start":78,"line_end":78,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158051,"byte_end":158054,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158055,"byte_end":158065,"line_start":80,"line_end":80,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158066,"byte_end":158089,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158090,"byte_end":158093,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158094,"byte_end":158108,"line_start":83,"line_end":83,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode(\"aGVsbG8gd29ybGQ=\").unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158109,"byte_end":158172,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158173,"byte_end":158204,"line_start":85,"line_end":85,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158205,"byte_end":158209,"line_start":86,"line_end":86,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158210,"byte_end":158216,"line_start":87,"line_end":87,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158217,"byte_end":158270,"line_start":88,"line_end":88,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":264},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158882,"byte_end":158895,"line_start":110,"line_end":110,"column_start":8,"column_end":21},"name":"decode_config","qualname":"::decode::decode_config","value":"pub fn decode_config<T: AsRef<[u8]>>(T, Config)\n-> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158383,"byte_end":158425,"line_start":93,"line_end":93,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158426,"byte_end":158467,"line_start":94,"line_end":94,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158468,"byte_end":158471,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158472,"byte_end":158484,"line_start":96,"line_end":96,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158485,"byte_end":158488,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158489,"byte_end":158499,"line_start":98,"line_end":98,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158500,"byte_end":158523,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158524,"byte_end":158527,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158528,"byte_end":158542,"line_start":101,"line_end":101,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode_config(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD).unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158543,"byte_end":158635,"line_start":102,"line_end":102,"column_start":1,"column_end":93}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158636,"byte_end":158667,"line_start":103,"line_end":103,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158668,"byte_end":158671,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/    let bytes_url = base64::decode_config(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE).unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158672,"byte_end":158772,"line_start":105,"line_end":105,"column_start":1,"column_end":101}},{"value":"/    println!(\"{:?}\", bytes_url);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158773,"byte_end":158808,"line_start":106,"line_end":106,"column_start":1,"column_end":36}},{"value":"/}","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158809,"byte_end":158813,"line_start":107,"line_end":107,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158814,"byte_end":158820,"line_start":108,"line_end":108,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":158821,"byte_end":158874,"line_start":109,"line_end":109,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":267},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159772,"byte_end":159789,"line_start":138,"line_end":138,"column_start":8,"column_end":25},"name":"decode_config_buf","qualname":"::decode::decode_config_buf","value":"pub fn decode_config_buf<T: AsRef<[u8]>>(T, Config, &mut Vec<u8>)\n-> Result<(), DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nWrites into the supplied buffer to avoid allocation.\nReturns a Result containing an empty tuple, aka ().","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159119,"byte_end":159161,"line_start":116,"line_end":116,"column_start":1,"column_end":43}},{"value":"/Writes into the supplied buffer to avoid allocation.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159162,"byte_end":159217,"line_start":117,"line_end":117,"column_start":1,"column_end":56}},{"value":"/Returns a Result containing an empty tuple, aka ().","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159218,"byte_end":159272,"line_start":118,"line_end":118,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159273,"byte_end":159276,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159277,"byte_end":159289,"line_start":120,"line_end":120,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159290,"byte_end":159293,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159294,"byte_end":159304,"line_start":122,"line_end":122,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159305,"byte_end":159328,"line_start":123,"line_end":123,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159329,"byte_end":159332,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159333,"byte_end":159347,"line_start":125,"line_end":125,"column_start":1,"column_end":15}},{"value":"/    let mut buffer = Vec::<u8>::new();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159348,"byte_end":159389,"line_start":126,"line_end":126,"column_start":1,"column_end":42}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD, &mut buffer).unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159390,"byte_end":159487,"line_start":127,"line_end":127,"column_start":1,"column_end":98}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159488,"byte_end":159520,"line_start":128,"line_end":128,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159521,"byte_end":159524,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/    buffer.clear();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159525,"byte_end":159547,"line_start":130,"line_end":130,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159548,"byte_end":159551,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE, &mut buffer)","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159552,"byte_end":159643,"line_start":132,"line_end":132,"column_start":1,"column_end":92}},{"value":"/        .unwrap();","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159644,"byte_end":159665,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159666,"byte_end":159698,"line_start":134,"line_end":134,"column_start":1,"column_end":33}},{"value":"/}","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159699,"byte_end":159703,"line_start":135,"line_end":135,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159704,"byte_end":159710,"line_start":136,"line_end":136,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":159711,"byte_end":159764,"line_start":137,"line_end":137,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":270},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":161045,"byte_end":161064,"line_start":174,"line_end":174,"column_start":8,"column_end":27},"name":"decode_config_slice","qualname":"::decode::decode_config_slice","value":"pub fn decode_config_slice<T: AsRef<[u8]>>(T, Config, &mut [u8])\n-> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode the input into the provided output slice.","sig":null,"attributes":[{"value":"/ Decode the input into the provided output slice.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":160554,"byte_end":160606,"line_start":165,"line_end":165,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":160607,"byte_end":160610,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ This will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":160611,"byte_end":160710,"line_start":167,"line_end":167,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":160711,"byte_end":160714,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ If you don't know ahead of time what the decoded length should be, size your buffer with a","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":160715,"byte_end":160809,"line_start":169,"line_end":169,"column_start":1,"column_end":95}},{"value":"/ conservative estimate for the decoded length of an input: 3 bytes of output for every 4 bytes of","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":160810,"byte_end":160910,"line_start":170,"line_end":170,"column_start":1,"column_end":101}},{"value":"/ input, rounded up, or in other words `(input_len + 3) / 4 * 3`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":160911,"byte_end":160978,"line_start":171,"line_end":171,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":160979,"byte_end":160982,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ If the slice is not large enough, this will panic.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":160983,"byte_end":161037,"line_start":173,"line_end":173,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":352},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4856,"byte_end":4864,"line_start":115,"line_end":115,"column_start":5,"column_end":13},"name":"Standard","qualname":"::CharacterSet::Standard","value":"CharacterSet::Standard","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" The standard character set (uses `+` and `/`).","sig":null,"attributes":[{"value":"/ The standard character set (uses `+` and `/`).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4722,"byte_end":4772,"line_start":112,"line_end":112,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4777,"byte_end":4780,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4785,"byte_end":4851,"line_start":114,"line_end":114,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":354},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5004,"byte_end":5011,"line_start":119,"line_end":119,"column_start":5,"column_end":12},"name":"UrlSafe","qualname":"::CharacterSet::UrlSafe","value":"CharacterSet::UrlSafe","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" The URL safe character set (uses `-` and `_`).","sig":null,"attributes":[{"value":"/ The URL safe character set (uses `-` and `_`).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4870,"byte_end":4920,"line_start":116,"line_end":116,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4925,"byte_end":4928,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4933,"byte_end":4999,"line_start":118,"line_end":118,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":356},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5237,"byte_end":5242,"line_start":123,"line_end":123,"column_start":5,"column_end":10},"name":"Crypt","qualname":"::CharacterSet::Crypt","value":"CharacterSet::Crypt","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","sig":null,"attributes":[{"value":"/ The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5017,"byte_end":5124,"line_start":120,"line_end":120,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5129,"byte_end":5132,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Not standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5137,"byte_end":5232,"line_start":122,"line_end":122,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":358},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5356,"byte_end":5362,"line_start":125,"line_end":125,"column_start":5,"column_end":11},"name":"Bcrypt","qualname":"::CharacterSet::Bcrypt","value":"CharacterSet::Bcrypt","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" The bcrypt character set (uses `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`).\n","sig":null,"attributes":[{"value":"/ The bcrypt character set (uses `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5248,"byte_end":5351,"line_start":124,"line_end":124,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":360},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5524,"byte_end":5533,"line_start":129,"line_end":129,"column_start":5,"column_end":14},"name":"ImapMutf7","qualname":"::CharacterSet::ImapMutf7","value":"CharacterSet::ImapMutf7","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" The character set used in IMAP-modified UTF-7 (uses `+` and `,`).","sig":null,"attributes":[{"value":"/ The character set used in IMAP-modified UTF-7 (uses `+` and `,`).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5368,"byte_end":5437,"line_start":126,"line_end":126,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5442,"byte_end":5445,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5450,"byte_end":5519,"line_start":128,"line_end":128,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":362},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5694,"byte_end":5700,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"BinHex","qualname":"::CharacterSet::BinHex","value":"CharacterSet::BinHex","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" The character set used in BinHex 4.0 files.","sig":null,"attributes":[{"value":"/ The character set used in BinHex 4.0 files.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5539,"byte_end":5586,"line_start":130,"line_end":130,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5591,"byte_end":5594,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ See [BinHex 4.0 Definition](http://files.stairways.com/other/binhex-40-specs-info.txt)","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5599,"byte_end":5689,"line_start":132,"line_end":132,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":351},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4703,"byte_end":4715,"line_start":111,"line_end":111,"column_start":10,"column_end":22},"name":"CharacterSet","qualname":"::CharacterSet","value":"pub enum CharacterSet {\n\n    /// The standard character set (uses `+` and `/`).\n    ///\n    /// See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).\n    Standard,\n\n    /// The URL safe character set (uses `-` and `_`).\n    ///\n    /// See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).\n    UrlSafe,\n\n    /// The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).\n    ///\n    /// Not standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.\n    Crypt,\n\n    /// The bcrypt character set (uses `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`).\n    Bcrypt,\n\n    /// The character set used in IMAP-modified UTF-7 (uses `+` and `,`).\n    ///\n    /// See [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)\n    ImapMutf7,\n\n    /// The character set used in BinHex 4.0 files.\n    ///\n    /// See [BinHex 4.0 Definition](http://files.stairways.com/other/binhex-40-specs-info.txt)\n    BinHex,\n}","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":362}],"decl_id":null,"docs":" Available encoding character sets\n","sig":null,"attributes":[{"value":"/ Available encoding character sets","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4626,"byte_end":4663,"line_start":109,"line_end":109,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":369},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":6733,"byte_end":6739,"line_start":162,"line_end":162,"column_start":12,"column_end":18},"name":"Config","qualname":"::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372}],"decl_id":null,"docs":" Contains configuration parameters for base64 encoding\n","sig":null,"attributes":[{"value":"/ Contains configuration parameters for base64 encoding","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":6634,"byte_end":6691,"line_start":160,"line_end":160,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7064,"byte_end":7067,"line_start":173,"line_end":173,"column_start":18,"column_end":21},"name":"new","qualname":"<Config>::new","value":"pub const fn new(CharacterSet, bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Config`.\n","sig":null,"attributes":[{"value":"/ Create a new `Config`.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7020,"byte_end":7046,"line_start":172,"line_end":172,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7308,"byte_end":7311,"line_start":182,"line_end":182,"column_start":18,"column_end":21},"name":"pad","qualname":"<Config>::pad","value":"pub const fn pad(Self, bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to pad output with `=` characters.\n","sig":null,"attributes":[{"value":"/ Sets whether to pad output with `=` characters.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7239,"byte_end":7290,"line_start":181,"line_end":181,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7599,"byte_end":7625,"line_start":190,"line_end":190,"column_start":18,"column_end":44},"name":"decode_allow_trailing_bits","qualname":"<Config>::decode_allow_trailing_bits","value":"pub const fn decode_allow_trailing_bits(Self, bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to emit errors for nonzero trailing bits.","sig":null,"attributes":[{"value":"/ Sets whether to emit errors for nonzero trailing bits.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7383,"byte_end":7441,"line_start":186,"line_end":186,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7446,"byte_end":7449,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ This is useful when implementing","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7454,"byte_end":7490,"line_start":188,"line_end":188,"column_start":5,"column_end":41}},{"value":"/ [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7495,"byte_end":7581,"line_start":189,"line_end":189,"column_start":5,"column_end":91}}]},{"kind":"Const","id":{"krate":0,"index":296},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7810,"byte_end":7818,"line_start":199,"line_end":199,"column_start":11,"column_end":19},"name":"STANDARD","qualname":"::STANDARD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set with padding.\n","sig":null,"attributes":[{"value":"/ Standard character set with padding.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7759,"byte_end":7799,"line_start":198,"line_end":198,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":297},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7988,"byte_end":8003,"line_start":206,"line_end":206,"column_start":11,"column_end":26},"name":"STANDARD_NO_PAD","qualname":"::STANDARD_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set without padding.\n","sig":null,"attributes":[{"value":"/ Standard character set without padding.","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7934,"byte_end":7977,"line_start":205,"line_end":205,"column_start":1,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":298},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8170,"byte_end":8178,"line_start":213,"line_end":213,"column_start":11,"column_end":19},"name":"URL_SAFE","qualname":"::URL_SAFE","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set with padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set with padding","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8120,"byte_end":8159,"line_start":212,"line_end":212,"column_start":1,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":299},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8346,"byte_end":8361,"line_start":220,"line_end":220,"column_start":11,"column_end":26},"name":"URL_SAFE_NO_PAD","qualname":"::URL_SAFE_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set without padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set without padding","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8293,"byte_end":8335,"line_start":219,"line_end":219,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":300},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8522,"byte_end":8527,"line_start":227,"line_end":227,"column_start":11,"column_end":16},"name":"CRYPT","qualname":"::CRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" As per `crypt(3)` requirements\n","sig":null,"attributes":[{"value":"/ As per `crypt(3)` requirements","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8477,"byte_end":8511,"line_start":226,"line_end":226,"column_start":1,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":301},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8676,"byte_end":8682,"line_start":234,"line_end":234,"column_start":11,"column_end":17},"name":"BCRYPT","qualname":"::BCRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Bcrypt character set\n","sig":null,"attributes":[{"value":"/ Bcrypt character set","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8641,"byte_end":8665,"line_start":233,"line_end":233,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":302},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8844,"byte_end":8854,"line_start":241,"line_end":241,"column_start":11,"column_end":21},"name":"IMAP_MUTF7","qualname":"::IMAP_MUTF7","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" IMAP modified UTF-7 requirements\n","sig":null,"attributes":[{"value":"/ IMAP modified UTF-7 requirements","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8797,"byte_end":8833,"line_start":240,"line_end":240,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":303},"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":9007,"byte_end":9013,"line_start":248,"line_end":248,"column_start":11,"column_end":17},"name":"BINHEX","qualname":"::BINHEX","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" BinHex character set\n","sig":null,"attributes":[{"value":"/ BinHex character set","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":8972,"byte_end":8996,"line_start":247,"line_end":247,"column_start":1,"column_end":25}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/chunked_encoder.rs","byte_start":9712,"byte_end":9726,"line_start":24,"line_end":24,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/chunked_encoder.rs","byte_start":12046,"byte_end":12056,"line_start":90,"line_end":90,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/chunked_encoder.rs","byte_start":12231,"byte_end":12241,"line_start":97,"line_end":97,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17272,"byte_end":17285,"line_start":24,"line_end":24,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17564,"byte_end":17577,"line_start":34,"line_end":34,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17898,"byte_end":17911,"line_start":45,"line_end":45,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":21407,"byte_end":21420,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":21957,"byte_end":21970,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":25283,"byte_end":25296,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":113530,"byte_end":113543,"line_start":77,"line_end":77,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":113922,"byte_end":113935,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":119003,"byte_end":119016,"line_start":221,"line_end":221,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":126058,"byte_end":126071,"line_start":375,"line_end":375,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127725,"byte_end":127744,"line_start":57,"line_end":57,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128513,"byte_end":128532,"line_start":79,"line_end":79,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128779,"byte_end":128798,"line_start":86,"line_end":86,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":129449,"byte_end":129455,"line_start":110,"line_end":110,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":129822,"byte_end":129846,"line_start":123,"line_end":123,"column_start":36,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156970,"byte_end":156981,"line_start":45,"line_end":45,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":157532,"byte_end":157543,"line_start":60,"line_end":60,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5710,"byte_end":5722,"line_start":136,"line_end":136,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7007,"byte_end":7013,"line_start":171,"line_end":171,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4109,"byte_end":4116,"line_start":89,"line_end":89,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":38}},{"kind":"Mod","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4161,"byte_end":4165,"line_start":91,"line_end":91,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":4222,"byte_end":4227,"line_start":94,"line_end":94,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":119}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/chunked_encoder.rs","byte_start":9712,"byte_end":9726,"line_start":24,"line_end":24,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/chunked_encoder.rs","byte_start":12046,"byte_end":12056,"line_start":90,"line_end":90,"column_start":10,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":28},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/chunked_encoder.rs","byte_start":12231,"byte_end":12241,"line_start":97,"line_end":97,"column_start":19,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":28},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17272,"byte_end":17285,"line_start":24,"line_end":24,"column_start":10,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":48},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17564,"byte_end":17577,"line_start":34,"line_end":34,"column_start":22,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":48},"to":{"krate":1,"index":6595}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/display.rs","byte_start":17898,"byte_end":17911,"line_start":45,"line_end":45,"column_start":51,"column_end":64},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":58},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":21407,"byte_end":21420,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":6590}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":21957,"byte_end":21970,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/read/decoder.rs","byte_start":25283,"byte_end":25296,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":81},"to":{"krate":5,"index":2572}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":113530,"byte_end":113543,"line_start":77,"line_end":77,"column_start":31,"column_end":44},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":6590}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":113922,"byte_end":113935,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":119003,"byte_end":119016,"line_start":221,"line_end":221,"column_start":26,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":136},"to":{"krate":5,"index":2630}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder.rs","byte_start":126058,"byte_end":126071,"line_start":375,"line_end":375,"column_start":25,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":2265}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":127725,"byte_end":127744,"line_start":57,"line_end":57,"column_start":22,"column_end":41},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128513,"byte_end":128532,"line_start":79,"line_end":79,"column_start":6,"column_end":25},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":128779,"byte_end":128798,"line_start":86,"line_end":86,"column_start":32,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":176},"to":{"krate":5,"index":2630}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":129449,"byte_end":129455,"line_start":110,"line_end":110,"column_start":22,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":4,"index":5374},"to":{"krate":0,"index":189}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/write/encoder_string_writer.rs","byte_start":129822,"byte_end":129846,"line_start":123,"line_end":123,"column_start":36,"column_end":60},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":196},"to":{"krate":5,"index":2630}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":156970,"byte_end":156981,"line_start":45,"line_end":45,"column_start":23,"column_end":34},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":329},"to":{"krate":1,"index":6595}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/decode.rs","byte_start":157532,"byte_end":157543,"line_start":60,"line_end":60,"column_start":23,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":329},"to":{"krate":5,"index":1519}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":5710,"byte_end":5722,"line_start":136,"line_end":136,"column_start":6,"column_end":18},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/chenge/.cargo/git/checkouts/rust-base64-sgx-9adf9d285e881803/dc7389e/src/lib.rs","byte_start":7007,"byte_end":7013,"line_start":171,"line_end":171,"column_start":6,"column_end":12},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}}]}